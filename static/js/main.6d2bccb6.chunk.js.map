{"version":3,"sources":["views/components/GlobalCSS.jsx","views/styles.js","views/scanner/styles.js","views/scanner/QRcodeResult.jsx","views/components/styles.js","views/components/Notification.jsx","views/scanner/Scanner.jsx","views/components/Header.jsx","views/generator/styles.js","views/generator/Generator.jsx","views/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["GlobalCSS","styles","body","margin","padding","fontFamily","color","wordBreak","backgroundColor","home","container","css","innerContainer","scanner","video","videoShadow","qrcodeResult","link","QRcodeResult","props","text","URL","_","isValidUrl","href","header","button","title","transformUppercase","notification","Notification","codeReader","BrowserQRCodeReader","constraints","audio","width","min","ideal","max","facingMode","Scanner","useState","resultText","setQRcodeResult","isNotification","setNotification","useRef","showNotification","setTimeout","useEffect","navigator","mediaDevices","getUserMedia","then","stream","srcObject","console","log","decodeFromVideoElementContinuously","r","e","NotFoundException","getCameraStream","current","transform","window","orientation","userAgent","indexOf","innerWidth","height","autoPlay","ref","Header","nextMode","setNextMode","onClick","changeMode","mode","generator","message","image","inputContainer","textArea","buttonContainer","Generator","imgURL","setImgURL","setMessage","codeWriter","BrowserQRCodeSvgWriter","content","svgToPNG","svgElement","svgData","XMLSerializer","serializeToString","btoa","placeholder","value","write","createSvg","alt","src","Home","setMode","innerHeight","maxWidth","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mKAGe,SAASA,IACtB,OACE,YAAC,IAAD,CACEC,OAAQ,CACNC,KAAM,CACJC,OAAQ,EACRC,QAAS,EACTC,WAAY,UACZC,MAAO,QACPC,UAAW,YACXC,gBAAiB,uB,iXCXpB,IAAMC,EAAO,CAClBC,UAAWC,YAAF,KAGTC,eAAgBD,YAAF,M,g3BCJT,IAAME,EAAU,CACrBH,UAAWC,YAAF,KAMTG,MAAOH,YAAF,KAKLI,YAAaJ,YAAF,MAQAK,EAAe,CAC1BN,UAAWC,YAAF,KAOTM,KAAMN,YAAF,MC1BS,SAASO,EAAaC,GAUnC,OACE,mBAAKR,IAAKV,EAAOS,WAVA,SAACU,GAClB,IACE,IAAIC,IAAID,GACR,MAAOE,GACP,OAAO,EAET,OAAO,EAKJC,CAAWJ,EAAMC,MAChB,iBAAGT,IAAKV,EAAOgB,KAAMO,KAAML,EAAMC,MAC9BD,EAAMC,MAGTD,EAAMC,M,82CCnBP,IAAMK,EAAS,CACpBf,UAAWC,YAAF,KAGTe,OAAQf,YAAF,KAkBNgB,MAAOhB,YAAF,KAaLiB,mBAAoBjB,YAAF,MAKPkB,EAAe,CAC1BnB,UAAWC,YAAF,MCvCI,SAASmB,IACtB,OACE,mBAAKnB,IAAKV,EAAOS,WACf,mFCCN,IAAMqB,EAAa,IAAIC,sBAEjBC,EAAc,CAClBC,OAAO,EACPpB,MAAO,CACLqB,MAAO,CAAEC,IAAK,IAAKC,MAAO,KAAMC,IAAK,MACrCC,WAAY,gBAMD,SAASC,IAAW,IAAD,EACMC,mBAAS,yBADf,mBACzBC,EADyB,KACbC,EADa,OAEUF,oBAAS,GAFnB,mBAEzBG,EAFyB,KAETC,EAFS,KAG5B/B,EAAQgC,mBAmBNC,EAAmB,WACvBF,GAAgB,GAChBG,YAAW,WACTH,GAAgB,KACf,MAOL,OAJAI,qBAAU,YAxBc,SAACnC,GACvBoC,UAAUC,aACPC,aAAanB,GACboB,MAAK,SAAiBC,GACrBxC,EAAMyC,UAAYD,EAClBE,QAAQC,IAAI,cACZ1B,EAAW2B,mCAAmC5C,GAAO,SAAC6C,EAAGC,GACjDD,IACJH,QAAQC,IAAIE,GACZhB,EAAgBgB,EAAEvC,MAClB2B,MAEGa,aAAaC,qBAAmBL,QAAQC,IAAIG,SAavDE,CAAgBhD,EAAMiD,WACrB,IAGD,mBAAKpD,IAAKV,EAAOS,WACdkC,GAAkB,YAACd,EAAD,MACnB,qBACEnB,IAAKA,YAAI,CACPV,EAAOa,MAAO,CAAEkD,UAxCkC,qBAAvBC,OAAOC,cAA8E,IAA7ChB,UAAUiB,UAAUC,QAAQ,YAwCjD,aAAe,cAC7D,CAAEjC,MAAO8B,OAAOI,WAAYC,OAAQL,OAAOI,cAE7CE,UAAU,EACVC,IAAK1D,IAEP,mBACEH,IAAKA,YAAI,CACPV,EAAOc,YACP,CAAEoB,MAAO8B,OAAOI,WAAYC,OAAQL,OAAOI,gBAG/C,YAACnD,EAAD,CAAcE,KAAMsB,KChEX,SAAS+B,EAAOtD,GAAQ,IAAD,EACJsB,mBAAS,aADL,mBAC7BiC,EAD6B,KACnBC,EADmB,KAapC,OACE,mBAAKhE,IAAKV,EAAOS,WACf,mBAAKC,IAAKV,EAAOyB,OAAQkD,QAAS,WAXnB,cAAbF,GACFvD,EAAM0D,WAAW,aACjBF,EAAY,aAEZxD,EAAM0D,WAAW,WACjBF,EAAY,gBAOTD,GAEH,mBAAK/D,IAAKV,EAAO0B,OAAjB,UACS,oBAAMhB,IAAKV,EAAO2B,oBAAqB,IAAMT,EAAM2D,Q,guCCvB3D,IAAMC,EAAY,CACvBrE,UAAWC,YAAF,KAOTqE,QAASrE,YAAF,KAGPsE,MAAOtE,YAAF,KAGLuE,eAAgBvE,YAAF,KAOdwE,SAAUxE,YAAF,KAIRyE,gBAAiBzE,YAAF,KAKfe,OAAQf,YAAF,MCzBO,SAAS0E,IAAa,IAAD,EACN5C,mBAAS,MADH,mBAC3B6C,EAD2B,KACnBC,EADmB,OAEJ9C,mBAAS,MAFL,mBAE3BuC,EAF2B,KAElBQ,EAFkB,KAG5BC,EAAa,IAAIC,yBACnBC,EAAU7C,iBAAO,MACrBU,QAAQC,IAAI,iCAEZ,IAOMmC,EAAW,SAACC,GAChB,IAAIC,GAAU,IAAIC,eAAgBC,kBAAkBH,GACpDN,EAAU,6BAA+BU,KAAKH,KAQhD,OACE,mBAAKnF,IAAKV,EAAOS,WACf,mBAAKC,IAAKV,EAAOiF,gBACf,mBAAKvE,IAAKV,EAAO+E,SAAjB,YACCA,GAGC,wBACErE,IAAKV,EAAOkF,SACZe,YAAY,wCACZ1B,IAAKmB,KAIX,mBAAKhF,IAAKV,EAAOmF,iBACf,mBAAKzE,IAAKV,EAAOyB,OAAQkD,QAAS,kBAhCtB,WAChB,GAAKe,EAAQ5B,QAAQoC,MAArB,CACA,IAAMN,EAAaJ,EAAWW,MAAMT,EAAQ5B,QAAQoC,MAAO,IAAK,KAChEX,EAAWG,EAAQ5B,QAAQoC,OAC3BP,EAASC,IA4BmCQ,KAAxC,UAGA,mBAAKzB,QAAS,kBAtBlBW,EAAU,WACVC,EAAW,OAqBsB7E,IAAKV,EAAOyB,QAAzC,WAID4D,GAAU,mBAAK3E,IAAKV,EAAOgF,MAAOqB,IAAK,GAAIC,IAAKjB,KC7CxC,SAASkB,IAAQ,IAAD,EACL/D,mBAAS,WADJ,mBACtBqC,EADsB,KAChB2B,EADgB,KAEzB7F,EAAiBD,YAAI,CACvBV,EAAOW,eACP,CACEuB,MAAO8B,OAAOI,WAAa,KAC3BC,OAAQL,OAAOyC,YAAc,KAC7BC,SAAU,WAGd,OACE,mBAAKhG,IAAKV,EAAOS,WACf,mBAAKC,IAAKC,GACR,YAAC6D,EAAD,CAAQI,WAAY4B,EAAS3B,KAAMA,IACzB,YAATA,EAAqB,YAACtC,EAAD,MAAc,YAAC6C,EAAD,QCjB7B,SAASuB,IACtB,OACE,uBACE,YAAC5G,EAAD,MACA,YAACwG,EAAD,OCGN,IAAMK,EAAcC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BlE,UAAUmE,cACPC,SAASH,GACT9D,MAAK,SAAAkE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf1E,UAAUmE,cAAcQ,YAI1BrE,QAAQC,IACN,iHAKE2D,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlB/D,QAAQC,IAAI,sCAGR2D,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5BS,OAAM,SAAAC,GACLzE,QAAQyE,MAAM,4CAA6CA,MC3FjEC,IAASC,OAAO,kBAACvB,EAAD,MAASwB,SAASC,eAAe,SDiB1C,SAAkBjB,GACvB,GAA6C,kBAAmBlE,UAAW,CAGzE,GADkB,IAAI7B,IAAIiH,cAAwBrE,OAAO8C,SAASvF,MACpD+G,SAAWtE,OAAO8C,SAASwB,OAIvC,OAGFtE,OAAOuE,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,cAAN,sBAEPzB,IAgEV,SAAiCM,EAAOC,GAEtCqB,MAAMtB,EAAO,CACXuB,QAAS,CAAE,iBAAkB,YAE5BrF,MAAK,SAAAsF,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYxE,QAAQ,cAG5ClB,UAAUmE,cAAc0B,MAAM1F,MAAK,SAAAkE,GACjCA,EAAayB,aAAa3F,MAAK,WAC7BY,OAAO8C,SAASkC,eAKpB/B,EAAgBC,EAAOC,MAG1BY,OAAM,WACLxE,QAAQC,IACN,oEAvFAyF,CAAwB/B,EAAOC,GAI/BlE,UAAUmE,cAAc0B,MAAM1F,MAAK,WACjCG,QAAQC,IACN,iHAMJyD,EAAgBC,EAAOC,OCxC/BC,I","file":"static/js/main.6d2bccb6.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport { jsx, Global } from \"@emotion/core\";\r\n\r\nexport default function GlobalCSS() {\r\n  return (\r\n    <Global\r\n      styles={{\r\n        body: {\r\n          margin: 0,\r\n          padding: 0,\r\n          fontFamily: \"ABeeZee\",\r\n          color: \"white\",\r\n          wordBreak: \"break-all\",\r\n          backgroundColor: \"rgb(200,200,200)\"\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { css } from \"@emotion/core\";\r\n\r\nexport const home = {\r\n  container: css`\r\n    width: 100%;\r\n  `,\r\n  innerContainer: css`\r\n    display: flex;\r\n    position: relative;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: rgba(50, 50, 50, 1);\r\n    max-width: 600px;\r\n    margin: auto;\r\n  `\r\n};\r\n","import { css } from \"@emotion/core\";\r\n\r\nexport const scanner = {\r\n  container: css`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    position: relative;\r\n  `,\r\n  video: css`\r\n    object-fit: cover;\r\n    max-width: 500px;\r\n    max-height: 400px;\r\n  `,\r\n  videoShadow: css`\r\n    position: absolute;\r\n    max-width: 500px;\r\n    max-height: 400px;\r\n    box-shadow: inset 0px 0px 0px 5em rgba(79, 92, 78, 0.5);\r\n  `\r\n};\r\n\r\nexport const qrcodeResult = {\r\n  container: css`\r\n    font-size: 18px;\r\n    width: 100%;\r\n    text-align: center;\r\n    padding: 5% 0;\r\n    z-index: 999; \r\n  `,\r\n  link: css`\r\n    &:visited {\r\n      color: lightgreen;\r\n    }\r\n    &:link {\r\n      color: lightgreen;\r\n    }\r\n  `\r\n};\r\n","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport { qrcodeResult as styles } from \"./styles\";\r\n\r\nexport default function QRcodeResult(props) {\r\n  const isValidUrl = (text) => {\r\n    try {\r\n      new URL(text);\r\n    } catch (_) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <div css={styles.container}>\r\n      {isValidUrl(props.text) ? (\r\n        <a css={styles.link} href={props.text}>\r\n          {props.text}\r\n        </a>\r\n      ) : (\r\n        props.text\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { css } from \"@emotion/core\";\r\n\r\nexport const header = {\r\n  container: css`\r\n    width: 100%;\r\n  `,\r\n  button: css`\r\n    width: fit-content;\r\n    min-width: 100px; \r\n    margin: 2% 2% 2% auto;\r\n    text-align: center;\r\n    padding: 1%;\r\n    background-color: cornflowerblue;\r\n    border-radius: 50px;\r\n    box-shadow: 0px 2px 6px 2px #0a45a5;\r\n    cursor: pointer;\r\n    @media (max-width: 350px) {\r\n      font-size: 11px;\r\n    }\r\n    &:hover {\r\n      background-color: blueviolet;\r\n      box-shadow: none;\r\n    }\r\n  `,\r\n  title: css`\r\n    float: none;\r\n    text-align: center;\r\n    font-size: 40px;\r\n    color: white;\r\n    padding: 1% 0;\r\n    @media (max-width: 500px) {\r\n      font-size: 150%;\r\n    }\r\n    @media (max-width: 350px) {\r\n      font-size: 120%;\r\n    }\r\n  `,\r\n  transformUppercase: css`\r\n    text-transform: capitalize;\r\n  `\r\n};\r\n\r\nexport const notification = {\r\n  container: css`\r\n    position: fixed;\r\n    text-align: center;\r\n    top: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100%;\r\n    font-size: 150%;\r\n    z-index: 2;\r\n    background-color: rgba(50, 50, 50, 0.7);\r\n    word-break: none;\r\n    @media (max-width: 350px) {\r\n      font-size: 110%;\r\n    }\r\n  `\r\n};\r\n","/** @jsx jsx */\r\nimport { notification as styles } from \"./styles\";\r\nimport { jsx } from \"@emotion/core\";\r\n\r\nexport default function Notification() {\r\n  return (\r\n    <div css={styles.container}>\r\n      <div>▼▼▼There is the Result▼▼▼</div>\r\n    </div>\r\n  );\r\n}\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useRef, useEffect, useState } from \"react\";\r\nimport { BrowserQRCodeReader, NotFoundException } from \"@zxing/library\";\r\nimport QRcodeResult from \"./QRcodeResult\";\r\nimport { scanner as styles } from \"./styles\";\r\nimport Notification from \"../components/Notification\";\r\n\r\nconst codeReader = new BrowserQRCodeReader();\r\n\r\nconst constraints = {\r\n  audio: false,\r\n  video: {\r\n    width: { min: 640, ideal: 1280, max: 1280 },\r\n    facingMode: \"environment\"\r\n  }\r\n};\r\n\r\nconst isMobileDevice = () => (typeof window.orientation !== \"undefined\") || (navigator.userAgent.indexOf('IEMobile') !== -1);\r\n\r\nexport default function Scanner() {\r\n  const [resultText, setQRcodeResult] = useState(\"Wait for detecting...\");\r\n  const [isNotification, setNotification] = useState(false);\r\n  let video = useRef();\r\n\r\n  const getCameraStream = (video) => {\r\n    navigator.mediaDevices\r\n      .getUserMedia(constraints)\r\n      .then(function success(stream) {\r\n        video.srcObject = stream;\r\n        console.log(\"get Stream\");\r\n        codeReader.decodeFromVideoElementContinuously(video, (r, e) => {\r\n          if (!!r) {\r\n            console.log(r);\r\n            setQRcodeResult(r.text);\r\n            showNotification();\r\n          }\r\n          if (!e instanceof NotFoundException) console.log(e);\r\n        });\r\n      });\r\n  };\r\n\r\n  const showNotification = () => {\r\n    setNotification(true);\r\n    setTimeout(() => {\r\n      setNotification(false);\r\n    }, 2000);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getCameraStream(video.current);\r\n  }, []);\r\n\r\n  return (\r\n    <div css={styles.container}>\r\n      {isNotification && <Notification />}\r\n      <video\r\n        css={css([\r\n          styles.video, { transform: isMobileDevice() ? ' scaleX(1)' : 'scaleX(-1)'},\r\n          { width: window.innerWidth, height: window.innerWidth }\r\n        ])}\r\n        autoPlay={true}\r\n        ref={video}\r\n      />\r\n      <div\r\n        css={css([\r\n          styles.videoShadow,\r\n          { width: window.innerWidth, height: window.innerWidth }\r\n        ])}\r\n      />\r\n      <QRcodeResult text={resultText} />\r\n    </div>\r\n  );\r\n}\r\n","/** @jsx jsx */\r\n\r\nimport { jsx } from \"@emotion/core\";\r\nimport { useState } from \"react\";\r\nimport { header as styles } from \"./styles\";\r\n\r\nexport default function Header(props) {\r\n  const [nextMode, setNextMode] = useState(\"generator\");\r\n\r\n  const changeMode = () => {\r\n    if (nextMode === \"generator\") {\r\n      props.changeMode(\"generator\");\r\n      setNextMode(\"scanner\");\r\n    } else {\r\n      props.changeMode(\"scanner\");\r\n      setNextMode(\"generator\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div css={styles.container}>\r\n      <div css={styles.button} onClick={() => changeMode()}>\r\n        {nextMode}\r\n      </div>\r\n      <div css={styles.title}>\r\n        QRcode <span css={styles.transformUppercase}>{\" \" + props.mode}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { css } from \"@emotion/core\";\r\n\r\nexport const generator = {\r\n  container: css`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    height: inherit;\r\n    width: 100%;\r\n  `,\r\n  message: css`\r\n    margin-bottom: 1%;\r\n  `,\r\n  image: css`\r\n    background-color: rgba(240, 240, 240, 0.9);\r\n  `,\r\n  inputContainer: css`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin: 3%;\r\n  `,\r\n  textArea: css`\r\n    margin-top: 3%;\r\n    width: 50%;\r\n  `,\r\n  buttonContainer: css`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-bottom: 3%;\r\n  `,\r\n  button: css`\r\n    margin: 3%;\r\n    padding: 5%;\r\n    background-color: darkblue;\r\n    border-radius: 50px;\r\n    width: 15vw;\r\n    text-align: center;\r\n    min-width: 90px;\r\n    max-width: 200px;\r\n    cursor: pointer;\r\n    &:hover {\r\n      background-color: blueviolet;\r\n    }\r\n    @media (max-width: 350px) {\r\n      font-size: 12px;\r\n    }\r\n  `\r\n};\r\n","/** @jsx jsx */\r\n\r\nimport { jsx } from \"@emotion/core\";\r\nimport { BrowserQRCodeSvgWriter } from \"@zxing/library\";\r\nimport { useState, useRef } from \"react\";\r\nimport { generator as styles } from \"./styles\";\r\n\r\nexport default function Generator() {\r\n  const [imgURL, setImgURL] = useState(null);\r\n  const [message, setMessage] = useState(null);\r\n  const codeWriter = new BrowserQRCodeSvgWriter();\r\n  let content = useRef(null);\r\n  console.log(\"ZXing code writer initialized\");\r\n\r\n  const createSvg = () => {\r\n    if (!content.current.value) return;\r\n    const svgElement = codeWriter.write(content.current.value, 300, 300);\r\n    setMessage(content.current.value);\r\n    svgToPNG(svgElement);\r\n  };\r\n\r\n  const svgToPNG = (svgElement) => {\r\n    let svgData = new XMLSerializer().serializeToString(svgElement);\r\n    setImgURL(\"data:image/svg+xml;base64,\" + btoa(svgData));\r\n  };\r\n\r\n  const clear = () => {\r\n    setImgURL(null);\r\n    setMessage(null);\r\n  };\r\n\r\n  return (\r\n    <div css={styles.container}>\r\n      <div css={styles.inputContainer}>\r\n        <div css={styles.message}>Message:</div>\r\n        {message ? (\r\n          message\r\n        ) : (\r\n          <textarea\r\n            css={styles.textArea}\r\n            placeholder=\"Type website address or some message.\"\r\n            ref={content}\r\n          />\r\n        )}\r\n      </div>\r\n      <div css={styles.buttonContainer}>\r\n        <div css={styles.button} onClick={() => createSvg()}>\r\n          Create\r\n        </div>\r\n        <div onClick={() => clear()} css={styles.button}>\r\n          Rework\r\n        </div>\r\n      </div>\r\n      {imgURL && <img css={styles.image} alt={\"\"} src={imgURL} />}\r\n    </div>\r\n  );\r\n}\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { home as styles } from \"./styles\";\r\nimport Scanner from \"./scanner/Scanner\";\r\nimport Header from \"./components/Header\";\r\nimport Generator from \"./generator/Generator\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Home() {\r\n  const [mode, setMode] = useState(\"scanner\");\r\n  let innerContainer = css([\r\n    styles.innerContainer,\r\n    {\r\n      width: window.innerWidth + \"px\",\r\n      height: window.innerHeight + \"px\",\r\n      maxWidth: \"600px\"\r\n    }\r\n  ]);\r\n  return (\r\n    <div css={styles.container}>\r\n      <div css={innerContainer}>\r\n        <Header changeMode={setMode} mode={mode} />\r\n        {mode === \"scanner\" ? <Scanner /> : <Generator />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/** @jsx jsx */\nimport {jsx} from \"@emotion/core\";\nimport GlobalCSS from \"./views/components/GlobalCSS\";\nimport Home from \"./views/Home\";\n\nexport default function App() {\n  return (\n    <div>\n      <GlobalCSS />\n      <Home />\n    </div>\n  );\n};\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}